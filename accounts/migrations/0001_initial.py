# Generated by Django 3.0 on 2021-08-04 14:17

from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(max_length=255, unique=True, verbose_name='email address')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('phone', models.CharField(blank=True, max_length=255, null=True)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('address', models.CharField(blank=True, max_length=255, null=True, verbose_name='Address')),
                ('is_premier_emp', models.BooleanField(default=False, help_text='Designates whether this user should be treated as a Premier Employee. ', verbose_name='Premier Employee ')),
                ('is_admin', models.BooleanField(default=False, help_text='Designates whether this user should be treated as an Admin. ', verbose_name='Admin')),
                ('is_secondary_emp', models.BooleanField(default=False, help_text='Designates whether this user should be treated as an Secondary Employee. ', verbose_name='Secondary Employee')),
                ('is_needy', models.BooleanField(default=False, help_text='Designates whether this user should be treated as an Needy. ', verbose_name='Needy ')),
                ('is_donator', models.BooleanField(default=False, help_text='Designates whether this user should be treated as an Donator. ', verbose_name='Donator ')),
                ('is_volunteer', models.BooleanField(default=False, help_text='Designates whether this user should be treated as an volunteer. ', verbose_name='volunteer ')),
                ('is_helper_employee', models.BooleanField(default=False, help_text='Designates whether this user should be treated as an Helper Employee. ', verbose_name='Helper Employee ')),
                ('user_type', models.PositiveSmallIntegerField(choices=[(1, 'ممثل المؤسسة'), (2, 'مشرف جمعية رئيسية'), (3, 'مشرف جمعية تنموية'), (4, 'مشرف متعاون'), (5, 'مستفيد'), (6, 'فاعل خير'), (7, 'متطوع'), (8, 'متدرب'), (9, 'مدرب')], help_text='User Role in A system ', null=True, verbose_name='User Type')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
